// Hooks
import { createContext, useEffect, useState } from 'react';

// Firestore
import { db } from '../lib/firebaseConfig';
import {
    collection,
    doc,
    where,
    getDocs,
    addDoc,
    orderBy,
    query,
    deleteDoc,
    updateDoc,
} from 'firebase/firestore';

const FeedbackContext = createContext();

export const FeedbackProvider = ({ children }) => {
    const [isLoading, setIsLoading] = useState(true);
    const [feedback, setFeedback] = useState([]);
    const [feedbackEdit, setFeedbackEdit] = useState({
        item: {},
        edit: false,
    });

    // READ Data from Firestore =============================================
    useEffect(() => {
        fetchFeedback();
    }, []);
    const fetchFeedback = async () => {
        // Create Query
        try {
            const q = query(collection(db, 'feedback'), orderBy('id', 'desc'));

            // Execture Query with GET Request
            const querySnapshot = await getDocs(q);
            const data = querySnapshot.docs.map((doc) => doc.data());
            // Set State for UI
            setFeedback(data);
            setIsLoading(false);
        } catch (e) {
            console.error('Failed to Read Data:', e);
        }
    };
    // READ Finish ==========================================================

    // POST Data to Firestore ===============================================
    const addFeedback = async (newFeedback) => {
        // Add to Firestore
        try {
            // Increment ID  (id -> 1, 2, 3, ...)
            newFeedback.id =
                feedback
                    .map((id) => id.id)
                    .sort()
                    .reverse()[0] + 1;

            // Add to Firestore
            await addDoc(collection(db, 'feedback'), newFeedback);

            // Update UI
            setFeedback([newFeedback, ...feedback]);
        } catch (e) {
            console.error('Error Posting Document', e);
        }
    };
    // POST Finish ==========================================================

    // DELETE Data from Firestore ===========================================
    const deleteFeedback = async (id) => {
        try {
            // Query autogenerated Doc ID using the UI Entry ID
            // **** ~~~ NOTE ~~~ ****
            // Plan to fix this to remove the extra get request if possible
            // Currently a get request must be called to get the ID of the feedback to delete
            // Should store that ID in State in UI instead
            const q = query(collection(db, 'feedback'), where('id', '==', id));
            const querySnapshot = await getDocs(q);
            const docRefID = querySnapshot.docs.map((doc) => doc.id);

            // Delete from Firestore
            await deleteDoc(doc(db, 'feedback', `${docRefID}`));

            // Update UI
            setFeedback(feedback.filter((item) => item.id !== id));
        } catch (e) {
            console.error('Error Deleting Document', e);
        }
    };
    // DELETE Finish =======================================================

    // UPDATE Data in Firestore ============================================
    const editFeedback = async (item) => {
        setFeedback(feedback.filter((entry) => entry.id !== item.id));
        setFeedbackEdit({
            item,
            edit: true,
        });
    };
    const updateFeedback = async (id, updatedItem) => {
        // Update Firestore
        try {
            updatedItem.id = id;
            // Query autogenerated Doc ID using the UI Entry ID
            // **** ~~~ NOTE ~~~ ****
            // Plan to fix this to remove the extra get request if possible
            // Currently a get request must be called to get the ID of the feedback to delete
            // Should store that ID in State in UI instead
            const q = query(collection(db, 'feedback'), where('id', '==', id));
            const querySnapshot = await getDocs(q);
            const docRefID = querySnapshot.docs.map((doc) => doc.id);
            await updateDoc(doc(db, 'feedback', `${docRefID}`), updatedItem);

            //**** ~~ ISSUE ~~ ****
            // Update causes a temporary key overlap in the framer motion
            // ID list (I think).
            setFeedback([
                updatedItem,
                ...feedback.filter((item) => item.id !== id),
            ]);
        } catch (e) {
            console.error('Error Updating Document', e);
        }
    };
    // UPDATE Finish ======================================================

    return (
        <FeedbackContext.Provider
            value={{
                feedback,
                feedbackEdit,
                isLoading,
                deleteFeedback,
                addFeedback,
                editFeedback,
                updateFeedback,
            }}
        >
            {children}
        </FeedbackContext.Provider>
    );
};

export default FeedbackContext;
